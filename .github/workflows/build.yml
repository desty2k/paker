name: Build

on:
  push:
    branches: [ master ]

jobs:
  test:
    name: Tests - Python ${{ matrix.python-version }} - ${{ matrix.platform }}
    runs-on: ${{ matrix.platform }}
    strategy:
      max-parallel: 2
      matrix:
        platform: [ ubuntu-latest, macos-latest, windows-latest ]
        tasks: [ test ]
        python-version: [ 3.6, 3.9 ]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tox tox-gh-actions
    - name: Test with tox
      run: tox
      env:
        PLATFORM: ${{ matrix.platform }}
        TASK: ${{ matrix.tasks }}

  check:
    needs: [ test ]
    name: Check - ${{ matrix.tasks }}
    runs-on: ${{ matrix.platform }}
    strategy:
      max-parallel: 2
      matrix:
        platform: [ ubuntu-latest ]
        python-version: [ 3.9 ]
        tasks: [ lint, safety, metric, release ]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tox tox-gh-actions
      - name: Running ${{ matrix.tasks }}
        run: tox
        env:
          PLATFORM: ${{ matrix.platform }}
          TASK: ${{ matrix.tasks }}

  release:
    runs-on: ubuntu-latest
    needs: [ test, check ]
    name: Publish release

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install .

    - name: Get package version
      run: |
        python paker -V > version.txt
        echo "BUILD_VERSION=$(cat version.txt)" | tr -d '\r\t\n' >> $GITHUB_ENV

    - name: Get latest version
      id: get_latest_version
      continue-on-error: true
      run: |
        git fetch --tags
        git fetch --prune --unshallow || true
        git describe --abbrev=0 --tags > release_version.txt
        echo "RELEASE_VERSION=$(cat release_version.txt)" | tr -d '\r\t\n' >> $GITHUB_ENV
        echo "${{env.RELEASE_VERSION}}"
    
    - name: Echo environment variables
      run: |
        echo "Uploaded package version is: "
        echo "${{env.BUILD_VERSION}}"
        echo "Latest package version is:"
        echo "${{env.RELEASE_VERSION}}"

    - name: Create a first release
      if: env.BUILD_VERSION != env.RELEASE_VERSION && env.RELEASE_VERSION == ''
      uses: softprops/action-gh-release@v1
      with:
        body: 'First release'
        tag_name: ${{ env.BUILD_VERSION }}
      env:
        GITHUB_TOKEN: ${{ secrets.PUBLISH_TOKEN }}

    - name: Generate changelog
      if: env.BUILD_VERSION != env.RELEASE_VERSION && env.RELEASE_VERSION != ''
      id: changelog
      uses: metcalfc/changelog-generator@v1.0.0
      with:
        myToken: ${{ secrets.PUBLISH_TOKEN }}

    - name: Create a release
      if: env.BUILD_VERSION != env.RELEASE_VERSION && env.RELEASE_VERSION != ''

      uses: softprops/action-gh-release@v1
      with:
        body: ${{ steps.changelog.outputs.changelog }}
        tag_name: ${{ env.BUILD_VERSION }}
      env:
        GITHUB_TOKEN: ${{ secrets.PUBLISH_TOKEN }}

    - name: Skip release
      if: env.BUILD_VERSION == env.RELEASE_VERSION
      run: |
        echo 'Skipping because version does not changed'
